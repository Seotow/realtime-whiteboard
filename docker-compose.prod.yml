version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: whiteboard-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_password_123}
      MONGO_INITDB_DATABASE: whiteboard
    volumes:
      - mongodb_data:/data/db
      - ./server/prisma/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - whiteboard-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: whiteboard-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    networks:
      - whiteboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password_123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: whiteboard-server-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: mongodb://admin:${MONGO_ROOT_PASSWORD:-secure_password_123}@mongodb:27017/whiteboard?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      CLIENT_URL: ${CLIENT_URL:-http://localhost}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-in-production}
      JWT_EXPIRE_TIME: 15m
      JWT_REFRESH_EXPIRE_TIME: 7d
      LOG_LEVEL: warn
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - whiteboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: whiteboard-client-prod
    restart: unless-stopped
    environment:
      NGINX_HOST: localhost
      NGINX_PORT: 80
    depends_on:
      server:
        condition: service_healthy
    networks:
      - whiteboard-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: whiteboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - whiteboard-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  whiteboard-network:
    driver: bridge
